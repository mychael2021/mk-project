// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ihs.Test.Framework.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FirstNameStartsWithParticularLetter")]
    public partial class FirstNameStartsWithParticularLetterFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "FirstNameStartsWithParticularLetter.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "FirstNameStartsWithParticularLetter", @"Test 1 : Click “Run” button - Check Output window text as expected
Test 2 : 
       =>(If your first name starts with letter “A-B-C-D-E”):
			Select NuGet Packages: nUnit (3.12.0)
			Check that nUnit package is added
	   =>ELSE (If your first name starts with letter “F-G-H-I-J-K”):
			Click “Share” button
			Check that link starts with “https://dotnetfiddle.net/”
	   =>ELSE (If your first name starts with letter “L-M-N-O-P”):
			Click “<” button on “Options” panel to hide this panel
			Check that “Options” panel is hidden
	   =>ELSE (If your first name starts with letter “Q-R-S-T-U”):
			Click “Save” button
			Check that  “Log In” window appeared
	   =>ELSE (If your first name starts with letter “V-W-X-Y-Z”):
			Click “Getting Started” button
			Check that  “< Back to Editor” button appeared", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test output window content equals input and perform action based first letter of " +
            "your first name")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("Hello world", "Michael", null)]
        [NUnit.Framework.TestCaseAttribute("IHS Markit - Preliminary", "Kenny", null)]
        [NUnit.Framework.TestCaseAttribute("Good morning", "Alex", null)]
        [NUnit.Framework.TestCaseAttribute("solve 3x + 2y -5 = 7", "Barbie", null)]
        [NUnit.Framework.TestCaseAttribute("", "Charly-man", null)]
        [NUnit.Framework.TestCaseAttribute("Nearly Bye 2020, hello 2021", "Fey", null)]
        [NUnit.Framework.TestCaseAttribute("new message", "Melony", null)]
        [NUnit.Framework.TestCaseAttribute("Oops", "Omenga", null)]
        [NUnit.Framework.TestCaseAttribute("starts with W", "Wes", null)]
        [NUnit.Framework.TestCaseAttribute("name starts with Z", "Zeus", null)]
        [NUnit.Framework.TestCaseAttribute("How about Tango", "Texus", null)]
        [NUnit.Framework.TestCaseAttribute("Think of another name", "Really-Cant", null)]
        [NUnit.Framework.TestCaseAttribute("Convert to int", "Eight", null)]
        [NUnit.Framework.TestCaseAttribute("K for...?", "Kilo", null)]
        public virtual void TestOutputWindowContentEqualsInputAndPerformActionBasedFirstLetterOfYourFirstName(string message, string firstName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("first name", firstName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test output window content equals input and perform action based first letter of " +
                    "your first name", null, tagsOfScenario, argumentsOfScenario);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given(string.Format("I Click the Run button, with text in code editor as Console.WriteLine(\"{0}\")", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.Then(string.Format("The text in the output window should match the input text, and should therefore b" +
                            "e {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.Given(string.Format("My first name, {0} starts with a particular letter", firstName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.Then("Perform relevant actions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("Verify outcomes are as expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
